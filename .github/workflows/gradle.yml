# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # (2) JDK 17 세팅
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    #기본으로 하면 배포되는
    # - name: init with Gradle
    #   uses: gradle/gradle-build-action@v2
    # - run: gradle init
      
    # - name: Build with Gradle
    #   uses: gradle/gradle-build-action@v2
    #   with:
    #     arguments: build
    
    # (3) Gradlew에 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # (4) 프로젝트 빌드
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # (6) 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ secrets.AWS_CODE_DEPLOY_APPLICATION }} \
          --ignore-hidden-files \
          --s3-location s3://${{ secrets.AWS_S3_BUCKET }}/${{ secrets.FILE_NAME }}.zip \
          --source .
    
    # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ secrets.AWS_CODE_DEPLOY_APPLICATION }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.AWS_CODE_DEPLOY_GROUP }} \
          --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=${{ secrets.FILE_NAME }}.zip,bundleType=zip
